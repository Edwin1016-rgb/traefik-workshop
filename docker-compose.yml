version: '3.8'

# Servicio principal de Traefik que actúa como reverse proxy y balanceador de carga
services:
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - "--api.insecure=true"  # Habilita el dashboard de Traefik (solo para desarrollo)
      - "--providers.docker=true"  # Habilita el proveedor de Docker
      - "--providers.docker.exposedbydefault=false"  # Solo los servicios con labels se exponen
      - "--entrypoints.web.address=:80"  # Puerto HTTP
      - "--entrypoints.websecure.address=:443"  # Puerto HTTPS
      - "--metrics.prometheus=true"  # Habilita métricas para Prometheus
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
      - "8080:8080"  # Puerto del dashboard de Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock  # Para interactuar con Docker
      - ./traefik-dynamic.yml:/traefik-dynamic.yml  # Configuración dinámica (middlewares, etc)
    labels:
      - "traefik.enable=true"  # Habilita Traefik para este servicio
      - "traefik.http.routers.dashboard.rule=Host(`traefik.localhost`)"  # Regla de ruteo
      - "traefik.http.routers.dashboard.service=api@internal"  # Usa el servicio interno de API
      - "traefik.http.routers.dashboard.middlewares=auth-admin@file"  # Middleware de autenticación
    networks:
      - traefik-net

  # Servicio de monitoreo - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus  # Configuración de Prometheus
      - prometheus_data:/prometheus   # Datos persistentes
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.localhost`)"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.routers.prometheus.middlewares=auth-admin@file"  # Requiere autenticación

  # Servicio de visualización - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana  # Datos persistentes de Grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin    # Usuario por defecto (cambiar en producción)
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Contraseña por defecto (cambiar en producción)
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.localhost`)"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.routers.grafana.middlewares=auth-admin@file"  # Requiere autenticación

  # Servicios de API (3 instancias para balanceo de carga)
  api1:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: api-service-1
    environment:
      - SERVICE_ID=api-1  # Identificador único para cada instancia
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api1.rule=Host(`api.localhost`)"  # Mismo host para balanceo
      - "traefik.http.services.api1.loadbalancer.server.port=3000"
      - "traefik.http.routers.api1.service=api-backend"  # Grupo para balanceo de carga

  api2:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: api-service-2
    environment:
      - SERVICE_ID=api-2
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api2.rule=Host(`api.localhost`)"
      - "traefik.http.services.api2.loadbalancer.server.port=3000"
      - "traefik.http.routers.api2.service=api-backend"

  api3:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: api-service-3
    environment:
      - SERVICE_ID=api-3
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api3.rule=Host(`api.localhost`)"
      - "traefik.http.services.api3.loadbalancer.server.port=3000"
      - "traefik.http.routers.api3.service=api-backend"

  # API de administración con acceso restringido
  admin-api:
    build: 
      context: ./admin-api
      dockerfile: Dockerfile
    container_name: admin-api-service
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin-api.rule=Host(`api.localhost`) && PathPrefix(`/admin`)"  # Ruta /admin
      - "traefik.http.services.admin-api.loadbalancer.server.port=3000"
      - "traefik.http.routers.admin-api.middlewares=ipwhitelist@file"  # Filtro por IP

  # API de backup (inicialmente desactivada)
  backup-api:
    build: 
      context: ./backup-api
      dockerfile: Dockerfile
    container_name: backup-api-service
    networks:
      - traefik-net
    deploy:
      replicas: 0  # No se despliega inicialmente
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backup-api.rule=Host(`backup.localhost`)"
      - "traefik.http.services.backup-api.loadbalancer.server.port=3000"

  # Servidor web Nginx para contenido estático
  nginx:
    image: nginx
    container_name: nginx-service
    volumes:
      - ./nginx/html:/usr/share/nginx/html  # Contenido estático
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nginx.rule=Host(`nginx.localhost`)"
      - "traefik.http.services.nginx.loadbalancer.server.port=80"

  # Servicio para páginas de error personalizadas
  error-pages:
    image: nginx
    container_name: error-pages
    volumes:
      - ./error-pages:/usr/share/nginx/html  # Páginas de error personalizadas
    networks:
      - traefik-net
    labels:
      - "traefik.enable=true"
      - "traefik.http.middlewares.error-pages.errors.status=500-599"  # Maneja errores 5xx
      - "traefik.http.middlewares.error-pages.errors.service=error-service"
      - "traefik.http.middlewares.error-pages.errors.query=/{status}.html"  # Plantillas por código
      - "traefik.http.services.error-service.loadbalancer.server.port=80"

# Configuración de red
networks:
  traefik-net:
    name: traefik-net  # Red compartida por todos los servicios

# Volúmenes para persistencia de datos
volumes:
  prometheus_data:  # Datos de métricas de Prometheus
  grafana_data:     # Configuración y dashboards de Grafana